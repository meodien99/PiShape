/**
 * Created by madcat on 12/1/15.
 */
module Shape3D {
    export class Sphere {

        public static createOctahedron(){
            var a = 3 / (2 * Math.sqrt(2)),
            b = 3 / 2,
            D = [[[-a, 0, a], [-a, 0, -a], [0, b, 0]], [[-a, 0, -a], [a, 0, -a], [0, b, 0]], [[a, 0, -a], [a, 0, a], [0, b, 0]], [[a, 0, a], [-a, 0, a], [0, b, 0]], [[a, 0, -a], [-a, 0, -a], [0, -b, 0]], [[-a, 0, -a], [-a, 0, a], [0, -b, 0]], [[a, 0, a], [a, 0, -a], [0, -b, 0]], [[-a, 0, a], [a, 0, a], [0, -b, 0]]];

            return D;
        }

        public static createDodecahedron(){
            var phi = (1 + Math.sqrt(5)) / 2, // golden ratio
            a = 1,
            b = 1 / phi,
            c = 2 - phi;

            a *= 1.5;
            b *= 1.5;
            c *= 1.5;

            var D = [[[c, 0, a], [-c, 0, a], [-b, b, b], [0, a, c], [b, b, b]], [[-c, 0, a], [c, 0, a], [b, -b, b], [0, -a, c], [-b, -b, b]], [[c, 0, -a], [-c, 0, -a], [-b, -b, -b], [0, -a, -c], [b, -b, -b]], [[-c, 0, -a], [c, 0, -a], [b, b, -b], [0, a, -c], [-b, b, -b]], [[0, a, -c], [0, a, c], [b, b, b], [a, c, 0], [b, b, -b]], [[0, a, c], [0, a, -c], [-b, b, -b], [-a, c, 0], [-b, b, b]], [[0, -a, -c], [0, -a, c], [-b, -b, b], [-a, -c, 0], [-b, -b, -b]], [[0, -a, c], [0, -a, -c], [b, -b, -b], [a, -c, 0], [b, -b, b]], [[a, c, 0], [a, -c, 0], [b, -b, b], [c, 0, a], [b, b, b]], [[a, -c, 0], [a, c, 0], [b, b, -b], [c, 0, -a], [b, -b, -b]], [[-a, c, 0], [-a, -c, 0], [-b, -b, -b], [-c, 0, -a], [-b, b, -b]], [[-a, -c, 0], [-a, c, 0], [-b, b, b], [-c, 0, a], [-b, -b, b]]];

            return D;
        }

        public static createIcosahedron(){
            var phi = (1 + Math.sqrt(5)) / 2, // golden ratio
            a = 1 / 2,
            b = 1 / (2 * phi);

            a *= 3;
            b *= 3;

            var D = [[[0, b, -a], [b, a, 0], [-b, a, 0]], [[0, b, a], [-b, a, 0], [b, a, 0]], [[0, b, a], [0, -b, a], [-a, 0, b]], [[0, b, a], [a, 0, b], [0, -b, a]], [[0, b, -a], [0, -b, -a], [a, 0, -b]], [[0, b, -a], [-a, 0, -b], [0, -b, -a]], [[0, -b, a], [b, -a, 0], [-b, -a, 0]], [[0, -b, -a], [-b, -a, 0], [b, -a, 0]], [[-b, a, 0], [-a, 0, b], [-a, 0, -b]], [[-b, -a, 0], [-a, 0, -b], [-a, 0, b]], [[b, a, 0], [a, 0, -b], [a, 0, b]], [[b, -a, 0], [a, 0, b], [a, 0, -b]], [[0, b, a], [-a, 0, b], [-b, a, 0]], [[0, b, a], [b, a, 0], [a, 0, b]], [[0, b, -a], [-b, a, 0], [-a, 0, -b]], [[0, b, -a], [a, 0, -b], [b, a, 0]], [[0, -b, -a], [-a, 0, -b], [-b, -a, 0]], [[0, -b, -a], [b, -a, 0], [a, 0, -b]], [[0, -b, a], [-b, -a, 0], [-a, 0, b]], [[0, -b, a], [a, 0, b], [b, -a, 0]]];

            return D;
        }

        public static createIcosahedronIntersected(){
            var phi = (1 + Math.sqrt(5)) / 2, // golden ratio
            a = 1,
            b = 1 / phi;
            //var c = 2 - phi;

            a *= 1.5;
            b *= 1.5;
            //c *= 1.5;

            var D = [[[0, b, -a], [b, a, 0], [-b, a, 0]], [[0, 0, 0], [-b, a, 0], [b, a, 0]], [[0, 0, 0], [0, -b, a], [-a, 0, b]], [[0, 0, 0], [a, 0, b], [0, -b, a]], [[0, b, -a], [0, 0, 0], [a, 0, -b]], [[0, b, -a], [-a, 0, -b], [0, 0, 0]], [[0, -b, a], [b, -a, 0], [-b, -a, 0]], [[0, 0, 0], [-b, -a, 0], [b, -a, 0]], [[-b, a, 0], [-a, 0, b], [-a, 0, -b]], [[-b, -a, 0], [-a, 0, -b], [-a, 0, b]], [[b, a, 0], [a, 0, -b], [a, 0, b]], [[b, -a, 0], [a, 0, b], [a, 0, -b]], [[0, 0, 0], [-a, 0, b], [-b, a, 0]], [[0, 0, 0], [b, a, 0], [a, 0, b]], [[0, b, -a], [-b, a, 0], [-a, 0, -b]], [[0, b, -a], [a, 0, -b], [b, a, 0]], [[0, 0, 0], [-a, 0, -b], [-b, -a, 0]], [[0, 0, 0], [b, -a, 0], [a, 0, -b]], [[0, -b, a], [-b, -a, 0], [-a, 0, b]], [[0, -b, a], [a, 0, b], [b, -a, 0]]];

            return D;
        }
    }
}